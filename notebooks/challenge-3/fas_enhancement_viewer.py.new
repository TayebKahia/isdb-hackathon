import streamlit as st
import json
import os
import re
from pathlib import Path

# Set page configuration
st.set_page_config(
    page_title="AAOIFI FAS Enhancement Viewer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Add custom CSS for better formatting
st.markdown("""
<style>
.main {
    padding: 20px;
}
.section-title {
    font-size: 24px;
    font-weight: bold;
    color: #1E88E5;
    margin-bottom: 10px;
}
.subsection-title {
    font-size: 20px;
    font-weight: bold;
    color: #43A047;
    margin-bottom: 8px;
    margin-top: 20px;
}
.standard-title {
    font-size: 28px;
    font-weight: bold;
    color: #0D47A1;
    text-align: center;
    padding: 10px;
    background-color: #E3F2FD;
    border-radius: 5px;
    margin-bottom: 20px;
}
.enhancement-card {
    background-color: #F5F5F5;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 15px;
    border-left: 5px solid #1976D2;
}
.validation-approved {
    border-left: 5px solid #43A047;
}
.validation-modified {
    border-left: 5px solid #FB8C00;
}
.validation-rejected {
    border-left: 5px solid #E53935;
}
.search-highlight {
    background-color: #FFFF00;
    padding: 2px;
    border-radius: 3px;
}
.agent-tag {
    display: inline-block;
    padding: 3px 8px;
    border-radius: 12px;
    font-size: 14px;
    margin-right: 5px;
}
.review-agent {
    background-color: #E3F2FD;
    color: #1565C0;
    border: 1px solid #1565C0;
}
.enhancement-agent {
    background-color: #E8F5E9;
    color: #2E7D32;
    border: 1px solid #2E7D32;
}
.validation-agent {
    background-color: #FFF3E0;
    color: #E65100;
    border: 1px solid #E65100;
}
.fas-badge {
    background-color: #ECEFF1;
    color: #455A64;
    padding: 5px 10px;
    border-radius: 15px;
    font-weight: bold;
    display: inline-block;
    margin-right: 10px;
}
</style>
""", unsafe_allow_html=True)

# Title and introduction
st.markdown("<h1 style='text-align: center; color: #0D47A1;'>AAOIFI FAS Enhancement & Analysis</h1>", unsafe_allow_html=True)
st.markdown("""
<div style='text-align: center; padding: 10px; margin-bottom: 20px;'>
This application shows the multi-agent system analysis of AAOIFI Financial Accounting Standards (FAS), 
including standard reviews, proposed enhancements, and validation results.
</div>
""", unsafe_allow_html=True)

# Display information about the multi-agent system
with st.expander("‚ÑπÔ∏è About The Multi-Agent System", expanded=False):
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class='agent-tag review-agent'>Review & Extraction Agent</div>
        <p>Analyzes standard documents to extract key elements, definitions, principles, and identify unclear areas.</p>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class='agent-tag enhancement-agent'>Enhancement Agent</div>
        <p>Proposes improvements to the standards based on the analysis, focusing on clarity, contemporary practices, and usability.</p>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class='agent-tag validation-agent'>Validation Agent</div>
        <p>Evaluates proposed enhancements for Shariah compliance, consistency, practicality, clarity, relevance, and thoroughness.</p>
        """, unsafe_allow_html=True)

# Function to highlight search terms
def highlight_text(text, search):
    if not search or search.strip() == "":
        return text
    
    # Escape special regex characters in the search term
    escaped_search = re.escape(search)
    highlighted_text = re.sub(
        f'({escaped_search})',
        r'<span class="search-highlight">\1</span>',
        text,
        flags=re.IGNORECASE
    )
    return highlighted_text

# Path to the JSON file
try:
    # First try the same directory
    json_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "fas_enhancement_results.json")
    if not os.path.exists(json_path):
        # Then try parent directory's notebooks folder
        project_root = Path(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        json_path = project_root / "notebooks" / "fas_enhancement_results.json"
    
    # Load the JSON data
    with open(json_path, 'r') as f:
        results = json.load(f)
except FileNotFoundError:
    st.error("Error: Could not find the FAS enhancement results file. Make sure 'fas_enhancement_results.json' is in the same directory.")
    st.stop()
except json.JSONDecodeError:
    st.error("Error: Invalid JSON format in the results file.")
    st.stop()

# Display standards in sidebar for navigation
st.sidebar.header("Navigation")
standard_options = {
    "FAS4": "FAS 4 (Murabaha)",
    "FAS10": "FAS 10 (Istisna'a)",
    "FAS32": "FAS 32 (Ijarah)"
}
selected_key = st.sidebar.radio("Select a standard to view:", list(standard_options.keys()), format_func=lambda x: standard_options[x])

# Add a search functionality
st.sidebar.markdown("---")
st.sidebar.header("Search")
search_term = st.sidebar.text_input("Search for specific topics:")

# Display search results if search term is provided
if search_term:
    st.sidebar.markdown("---")
    st.sidebar.markdown(f"### Search Results for '{search_term}'")
    
    results_found = False
    for std_key, std_data in results.items():
        hits = 0
        
        # Search in standard info
        if search_term.lower() in std_data["standard_info"].lower():
            hits += std_data["standard_info"].lower().count(search_term.lower())
        
        # Search in enhancements
        if search_term.lower() in std_data["enhancements"].lower():
            hits += std_data["enhancements"].lower().count(search_term.lower())
            
        # Search in validation results
        if search_term.lower() in std_data["validation_results"].lower():
            hits += std_data["validation_results"].lower().count(search_term.lower())
        
        if hits > 0:
            results_found = True
            st.sidebar.markdown(f"<div class='fas-badge'>{standard_options[std_key]}</div> {hits} occurrences", unsafe_allow_html=True)
    
    if not results_found:
        st.sidebar.info("No matching results found.")

# Get the standard data
if selected_key in results:
    standard_data = results[selected_key]
    
    # Display the standard name as a header with badge
    st.markdown(f"""
        <div class='standard-title'>
            <span class='fas-badge'>{selected_key}</span> {standard_data['standard_name']}
        </div>
    """, unsafe_allow_html=True)
    
    # Create tabs for different sections
    tabs = st.tabs(["Standard Information", "Enhancements", "Validation Results", "All Content"])
    
    # Tab 1: Standard Information
    with tabs[0]:
        st.markdown("<div class='section-title'><span class='agent-tag review-agent'>Review & Extraction Agent</span> Standard Information</div>", unsafe_allow_html=True)
        
        # Apply search highlighting if needed
        info_text = standard_data["standard_info"]
        if search_term:
            info_text = highlight_text(info_text, search_term)
        
        st.markdown(info_text, unsafe_allow_html=True if search_term else False)
    
    # Tab 2: Enhancements
    with tabs[1]:
        st.markdown("<div class='section-title'><span class='agent-tag enhancement-agent'>Enhancement Agent</span> Proposed Enhancements</div>", unsafe_allow_html=True)
        
        # Try to identify separate enhancements in the text
        enhancement_text = standard_data["enhancements"]
        
        # Apply search highlighting if needed
        if search_term:
            enhancement_text = highlight_text(enhancement_text, search_term)
        
        # Split by common enhancement numbering patterns
        # Look for patterns like "1.", "Enhancement 1:", etc.
        enhancement_sections = re.split(r'(?:\n|\r\n)(?:\*\*\d+\.|\*\*|\-|Enhancement \d+:)', enhancement_text)
        
        if len(enhancement_sections) > 1:
            # First element is typically an introduction
            st.markdown(enhancement_sections[0], unsafe_allow_html=True if search_term else False)
            
            # Display each enhancement in a card
            for i, section in enumerate(enhancement_sections[1:], 1):
                with st.expander(f"Enhancement {i}", expanded=search_term and search_term in section.lower()):
                    st.markdown(f"<div class='enhancement-card'>{section.strip()}</div>", unsafe_allow_html=True)
        else:
            # If we can't split it nicely, just show the whole thing
            st.markdown(enhancement_text, unsafe_allow_html=True if search_term else False)
    
    # Tab 3: Validation Results
    with tabs[2]:
        st.markdown("<div class='section-title'><span class='agent-tag validation-agent'>Validation Agent</span> Validation Results</div>", unsafe_allow_html=True)
        
        validation_text = standard_data["validation_results"]
        
        # Apply search highlighting if needed
        if search_term:
            validation_text = highlight_text(validation_text, search_term)
        
        # Look for common patterns in validation results
        # Try to extract sections for Approved, Approved with Modifications, and Rejected
        approved_pattern = r'(?:Approved|APPROVED)[:\s]+(.*?)(?=(?:Approved with Modifications|APPROVED WITH MODIFICATIONS|Rejected|REJECTED|\Z))'
        modified_pattern = r'(?:Approved with Modifications|APPROVED WITH MODIFICATIONS)[:\s]+(.*?)(?=(?:Approved|APPROVED|Rejected|REJECTED|\Z))'
        rejected_pattern = r'(?:Rejected|REJECTED)[:\s]+(.*?)(?=(?:Approved|APPROVED|Approved with Modifications|APPROVED WITH MODIFICATIONS|\Z))'
        
        approved_match = re.search(approved_pattern, validation_text, re.DOTALL)
        modified_match = re.search(modified_pattern, validation_text, re.DOTALL)
        rejected_match = re.search(rejected_pattern, validation_text, re.DOTALL)
        
        # Summary of validations
        st.markdown("### Validation Summary")
        
        # Create columns for the validation categories
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("<div class='subsection-title'>Approved</div>", unsafe_allow_html=True)
            if approved_match:
                st.markdown(f"<div class='enhancement-card validation-approved'>{approved_match.group(1).strip()}</div>", unsafe_allow_html=True)
            else:
                st.info("No explicitly approved enhancements found.")
                
        with col2:
            st.markdown("<div class='subsection-title'>Approved with Modifications</div>", unsafe_allow_html=True)
            if modified_match:
                st.markdown(f"<div class='enhancement-card validation-modified'>{modified_match.group(1).strip()}</div>", unsafe_allow_html=True)
            else:
                st.info("No enhancements approved with modifications found.")
                
        with col3:
            st.markdown("<div class='subsection-title'>Rejected</div>", unsafe_allow_html=True)
            if rejected_match:
                st.markdown(f"<div class='enhancement-card validation-rejected'>{rejected_match.group(1).strip()}</div>", unsafe_allow_html=True)
            else:
                st.info("No rejected enhancements found.")
        
        # If we couldn't parse the validation structure nicely or if searching, show the full text
        st.markdown("<div class='subsection-title'>Detailed Validation Report</div>", unsafe_allow_html=True)
        with st.expander("View Full Validation Report", expanded=search_term is not None and search_term != ""):
            st.markdown(validation_text, unsafe_allow_html=True if search_term else False)
    
    # Tab 4: All Content
    with tabs[3]:
        st.markdown("<div class='section-title'>Complete Analysis</div>", unsafe_allow_html=True)
        
        st.markdown(f"<div class='subsection-title'><span class='agent-tag review-agent'>Review & Extraction Agent</span> Standard Information</div>", unsafe_allow_html=True)
        with st.expander("View Standard Information", expanded=False):
            info_text = standard_data["standard_info"]
            if search_term:
                info_text = highlight_text(info_text, search_term)
            st.markdown(info_text, unsafe_allow_html=True if search_term else False)
        
        st.markdown(f"<div class='subsection-title'><span class='agent-tag enhancement-agent'>Enhancement Agent</span> Proposed Enhancements</div>", unsafe_allow_html=True)
        with st.expander("View Proposed Enhancements", expanded=False):
            enhancement_text = standard_data["enhancements"]
            if search_term:
                enhancement_text = highlight_text(enhancement_text, search_term)
            st.markdown(enhancement_text, unsafe_allow_html=True if search_term else False)
        
        st.markdown(f"<div class='subsection-title'><span class='agent-tag validation-agent'>Validation Agent</span> Validation Results</div>", unsafe_allow_html=True)
        with st.expander("View Validation Results", expanded=False):
            validation_text = standard_data["validation_results"]
            if search_term:
                validation_text = highlight_text(validation_text, search_term)
            st.markdown(validation_text, unsafe_allow_html=True if search_term else False)

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666; padding: 10px;'>
Developed for the ISDB Hackathon | Multi-Agent System for AAOIFI FAS Analysis
</div>
""", unsafe_allow_html=True)
